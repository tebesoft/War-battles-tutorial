local VUP = vmath.vector3(0, 1, 0)
local VDOWN = vmath.vector3(0, -1, 0)
local VLEFT = vmath.vector3(-1, 0, 0)
local VRIGHT = vmath.vector3(1, 0, 0)


function init(self)
	-- Add initialization code here
	-- Learn more: https://defold.com/manuals/script/
	-- Remove this function if not needed
	msg.post(".", "acquire_input_focus")
	
	self.moving = false
	self.firing = false
	
	self.input = vmath.vector3()
	self.dir = vmath.vector3(0, 1, 0)
	self.speed = 50
	self.recharge = 0

	self.current_anim = nil
end

function final(self)
	-- Add finalization code here
	-- Learn more: https://defold.com/manuals/script/
	-- Remove this function if not needed
	msg.post(".", "release_input_focus")
end

local function update_animation(self)

	local anim = hash("player-idle")

	if self.moving then
		if self.dir.x > 0 then
			anim = hash("player-right")
		elseif self.dir.x < 0 then
			anim = hash("player-left")
		elseif self.dir.y > 0 then
			anim = hash("player-up")
		elseif self.dir.y < 0 then
			anim = hash("player-down")
		end
	end

	if anim ~= self.current_anim then
		msg.post("#sprite", "play_animation", { id = anim })
		self.current_anim = anim
	end
	
	-- if self.moving then
	-- 	if vmath.dot(self.dir, VUP) == 1 then
	-- 		self.curr_anim = "player-up"
	-- 	elseif vmath.dot(self.dir, VDOWN) == 1 then
	-- 		self.curr_anim = "player-down"
	-- 	end
	-- elseif self.curr_anim ~= "player-idle" then
	-- 	self.curr_anim = "player-idle"
	-- end
	-- sprite.play_flipbook("#sprite", self.curr_anim)
end

function update(self, dt)
	-- Add update code here
	-- Learn more: https://defold.com/manuals/script/
	-- Remove this function if not needed

	update_animation(self)
	
	if self.moving then
		local pos = go.get_position()
		pos = pos + self.dir * self.speed * dt
		go.set_position(pos)
	end

	if self.firing and self.recharge < 1 then
		-- Compute the angle (in radians) of the player.
		local angle = math.atan2(self.dir.y, self.dir.x)
		-- Create a quaternion for that angular rotation around Z.
		local rot = vmath.quat_rotation_z(angle)
		-- Create a table containing property values to pass to the rocket.
		local props = { dir = self.dir }    
		-- Add explicit position (nil, the rocket will spawn at the player's position), rotation (the calculated quaternion) and spawn property values.
		factory.create("#rocketfactory", nil, rot, props)
		self.recharge = 20
	end

	self.input.x = 0
	self.input.y = 0
	self.moving = false
	self.firing = false

	if self.recharge > 0 then
		self.recharge = self.recharge - 1
	end
end

function fixed_update(self, dt)
	-- This function is only called if 'Use Fixed Timestep' is enabled in the Physics section of game.project
	-- Add update code here
	-- Learn more: https://defold.com/manuals/script/
	-- Remove this function if not needed
end

function on_message(self, message_id, message, sender)
	-- Add message-handling code here
	-- Learn more: https://defold.com/manuals/message-passing/
	-- Remove this function if not needed
end

function on_input(self, action_id, action)
	if action_id == hash("up") then
		self.input.y = 1
	elseif action_id == hash("down") then
		self.input.y = -1
	elseif action_id == hash("left") then
		self.input.x = -1
	elseif action_id == hash("right") then
		self.input.x = 1
	elseif action_id == hash("fire") then
		self.firing = true
	end

	if vmath.length(self.input) > 0 then
		self.moving = true
		self.dir = vmath.normalize(self.input)
	end

end

